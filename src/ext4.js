caterwaul.module( 'ext4' ,function($) {$.ext4= (function( ) {var must_be=function(x,y) {;
return x===y||console.log( ( '\033[1;31m >> ' + (x) + ' was expected to be ' + (y) + '\033[0;0m' ) ) } ;
return($.merge(function(_) {return $.ext4.init.apply(this,arguments) } , {superblock: (function(it) {return(must_be(it.size() ,1024) ) ,it} ) .call(this, ($.struct() .u32l( 'inodes blocks reserved_blocks free_blocks free_inodes first_data_block log_of_block_size obsolete_log_fragment_size blocks_per_group' ) .u32l( 'obsolete_fragments_per_group inodes_per_group mount_time write_time' ) .u16l( 'mounts max_mounts magic state error_behavior minor_revision_level' ) .u32l( 'last_check check_interval creator_os revision_level' ) .u16l( 'default_uid default_gid' ) .u32l( 'first_inode' ) .u16l( 'inode_size block_group_number' ) .u32l( 'feature_compatible feature_incompatible feature_ro_compatible' ) .ascii( 'uuid' ) (16) .ascii( 'volume_name' ) (16) .ascii( 'last_mounted' ) (64) .u32l( 'algorithm_usage_bitmap' ) .u8( 'preallocate_blocks preallocate_dir_blocks' ) .u16l( 'reserved_gdt_blocks' ) .u8( 'journal_uuid' ,16) .u32l( 'journal_inode journal_device last_orphan' ) .u32l( 'hash_seed' ,4) .u8( 'default_hash_version jni_backup_type' ) .u16l( 'group_descriptor_size' ) .u32l( 'default_mount_options first_meta_block_group mkfs_time' ) .u32l( 'journal_block_backup' ,17) .u32l( 'blocks_high reserved_blocks_high free_blocks_high' ) .u16l( 'minimum_inode_size inode_reserve_size' ) .u32l( 'flags' ) .u16l( 'raid_stride mmp_interval' ) .u32l( 'mmp_block' ,2) .u32l( 'raid_stripe_width' ) .u8( 'log_of_flexible_block_group_size' ) .u8( 'reserved_char_pad' ) .u16l( 'reserved_pad' ) .u32l( 'kb_written' ,2) .u32l( 'snapshot_inode snapshot_id' ) .u32l( 'snapshot_reserved_block_count' ,2) .u32l( 'snapshot_list_inode error_count first_error_time' ) .u32l( 'first_error_inode' ) .u32l( 'first_error_block' ,2) .ascii( 'first_error_function' ) (32) .u32l( 'first_error_line last_error_time last_error_inode last_error_line' ) .u32l( 'last_error_block' ,2) .ascii( 'last_error_function' ) (32) .ascii( 'mount_options' ) (64) .u32l( 'user_quota_inode group_quota_inode overhead_blocks checksum' ) .u32l( 'reserved' ,108) ) ) ,block_group: (function(it) {return(must_be(it.size() ,64) ) ,it} ) .call(this, ($.struct() .u32l( 'block_bitmap inode_bitmap inode_table' ) .u16l( 'free_block_count free_inode_count used_directory_count flags' ) .u32l( 'reserved' ,2) .u16l( 'unused_inodes checksum' ) .u32l( 'block_bitmap_high inode_bitmap_high inode_table_high' ) .u16l( 'free_block_count_high free_inode_count_high' ) .u16l( 'used_directory_count_high unused_inodes_high' ) .u32l( 'reserved2' ,3) ) ) ,inode: (function(it) {return(must_be(it.size() ,156) ) ,it} ) .call(this, ($.struct() .u16l( 'mode uid' ) .u32l( 'size atime ctime mtime dtime' ) .u16l( 'gid link_count' ) .u32l( 'block_count flags version' ) .u8( 'i_block' ,60) .u32l( 'generation extended_attribute_block size_high obsolete_fragment_address' ) .u16l( 'block_count_high extended_attribute_block_high uid_high gid_high' ) .u32l( 'reserved' ) .u16l( 'extra_inode_size pad_1' ) .u32l( 'ctime_extra mtime_extra atime_extra crtime crtime_extra version_high' ) ) ) ,block_map:$.struct() .u32l( 'direct' ,12) .u32l( 'indirect_block_1 indirect_block_2 indirect_block_3' ) ,extent_tree:$.struct() .u16l( 'magic entries max depth' ) .u32l( 'generation' ) ,extent_index:$.struct() .u32l( 'block leaf' ) .u16l( 'leaf_high unused' ) ,extent_leaf:$.struct() .u32l( 'block' ) .u16l( 'length start_high' ) .u32l( 'start_low' ) ,directory_entry:$.struct() .u32l( 'inode' ) .u16l( 'record_length' ) .u8( 'name_length' ) .u8( 'file_type' ) .ascii( 'name' ,255) ,htree_root:$.struct() .u32l( 'dot_inode' ) .u16l( 'dot_record_length' ) .u8( 'dot_name_length dot_file_type' ) .u8( 'dot_name' ,4) .u32l( 'dotdot_inode' ) .u16l( 'dotdot_record_length' ) .u8( 'dotdot_name_length dotdot_file_type' ) .u8( 'dotdot_name' ,4) .u8( 'hash_version info_length indirect_levels unused_flags' ) .u16l( 'limit count' ) .u32l( 'block' ) ,htree_node:$.struct() .u32l( 'fake_inode' ) .u16l( 'fake_record_length' ) .u8( 'name_length file_type' ) .u16l( 'limit count' ) .u32l( 'block' ) ,htree_entry:$.struct() .u32l( 'hash next' ) } ) ) } ) .call(this) , (function( ) {var methods=function() {;
return{superblock:function() {;
return superblock(this.block_source) } } } ,superblock=function(source) {;
return(source(1024,1024) ) .map(function(_) {return become_superblock_given(_,source) } ) } ,become_superblock_given=function(sb,s) {;
var result=$.merge($.ext4.superblock.decode(sb) , (function( ) {var real_block_size=function() {;
return sb._real_block_size|| (sb._real_block_size=1<<10+sb.log_of_block_size) } ,inodes_per_block=function() {;
return sb._blocks_per_inode|| (sb._blocks_per_inode=real_block_size() /sb.inode_size>>>0) } ,block_group_size=function() {;
return sb._block_group_size|| (sb._block_group_size=$.ext4.block_group.size() ) } ,block_group_offset=function() {;
return sb.log_of_block_size?1:2} ,read_block=function(n) {;
return source(n*real_block_size() ,real_block_size() ) } ,read_block_group=function(n) {;
return(read_block(block_group_offset() +n*block_group_size() ) ) .map(function(_) {return become_block_group(_,sb) } ) } ,read_inode=function(n) {;
return(read_block_group( (n-1) /sb.inodes_per_group>>>0) ) .flat_map(function(_) {return _.read_inode( (n-1) %sb.inodes_per_group) } ) } ,read_first_inode=function() {;
return read_inode(sb.first_inode) } ,block_group_count=function() {;
return Math.max(1,sb.blocks/sb.blocks_per_group>>>0) } ,block_group_map=function() {;
return $.future( (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( ( (read_block_group) .call( {x0:x0,xi:xi,xl:xl,xs:xs,xr:xr} ,x) ) ) ;
return xr} ) .call(this, (function(i,u,s) {if( (u-i) *s<=0)return[ ] ;
for(var r= [ ] ,d=u-i;
d>0?i<u:i>u;
i+=s)r.push(i) ;
return r} ) ( (0) , (block_group_count() ) , (1) ) ) ) } ;
return( {real_block_size:real_block_size,inodes_per_block:inodes_per_block,block_group_size:block_group_size,block_group_offset:block_group_offset,read_block:read_block,read_block_group:read_block_group,read_inode:read_inode,read_first_inode:read_first_inode,block_group_count:block_group_count,block_group_map:block_group_map} ) } ) .call(this) ) ;
var sb=result;
return result} ,become_block_group=function(g,sb) {;
var result=$.merge($.ext4.block_group.decode(g) , (function( ) {var read_inode=function(n) {;
return(sb.read_block(g.inode_table+ (n/sb.inodes_per_block() >>>0) ) ) .map(function(_) {return become_inode(_, (n%sb.inodes_per_block() *sb.inode_size) ,sb) } ) } ;
return( {read_inode:read_inode} ) } ) .call(this) ) ;
var g=result;
return result} ,become_inode=function(i,o,sb) {;
var result=$.merge($.ext4.inode.decode(i,o) , (function( ) {var permission_bits=function() {;
return i.mode&0xfff} ,extents_enabled=function() {;
return i.flags&0x80000} ,hashed_directory=function() {;
return i.flags&0x1000} ,file_type=function() {;
return'#pc#d#b#f#l#s' .charAt(i.mode>>>12) } ,data_blocks=function() {;
return $.future( (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( (data_block(x) ) ) ;
return xr} ) .call(this, (function(i,u,s) {if( (u-i) *s<=0)return[ ] ;
for(var r= [ ] ,d=u-i;
d>0?i<u:i>u;
i+=s)r.push(i) ;
return r} ) ( (0) , (i.block_count) , (1) ) ) ) } ,read_directory=function() {;
return(data_blocks() ) .map(function(_) {return(function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push.apply(xr,Array.prototype.slice.call( (directory_entries_in(x) ) ) ) ;
return xr} ) .call(this,_) } ) } ,extent_root=function() {;
return become_extent_tree(i.i_blocks,sb) } ,data_block=function(n) {;
return extent_root() .data_block(n) } ;
return( {permission_bits:permission_bits,extents_enabled:extents_enabled,hashed_directory:hashed_directory,file_type:file_type,data_blocks:data_blocks,read_directory:read_directory,extent_root:extent_root,data_block:data_block} ) } ) .call(this) ) ;
var i=result;
return result} ,directory_entry=function(block_data,offset) {;
return(function(it) {return(it.size=function() {;
return it.record_length} ) ,it} ) .call(this, ($.ext4.directory_entry.decode(block_data,offset) ) ) } ,directory_entries_in=function(block_data) {;
return(function( ) {var offset=0,result= [ ] ;
return( ( ( (function(xs) {var x,x0,xi,xl,xr;
for(var x=xs,xi=0,x0,xl;
x0= (block_data[offset] +block_data[offset+1] ===0) ;
 ++xi)x= ( (function( ) {var d=directory_entry(block_data,offset) ;
return(result.push(d) ,offset+=d.size() ) } ) .call(this) ) ;
return x} ) .call(this,null) ) , (result) ) ) } ) .call(this) } ,become_extent_tree=function(e,sb) {;
var result=$.merge($.ext4.extent_tree.decode(e) , (function( ) {var child_structure=function() {;
return t._child_structure|| (t._child_structure=t.depth?function(_) {return become_extent_index(e,_,sb) } :function(_) {return become_extent_leaf(e,_,sb) } ) } ,children=function() {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( (child_structure() ($.ext4.extent_tree.size() +xi*12) ) ) ;
return xr} ) .call(this, (function(i,u,s) {if( (u-i) *s<=0)return[ ] ;
for(var r= [ ] ,d=u-i;
d>0?i<u:i>u;
i+=s)r.push(i) ;
return r} ) ( (0) , (t.entries) , (1) ) ) } ,container_of=function(b) {;
return(function( ) {var next=children() ;
return( ( ( (function(xs) {var x,x0,xi,xl,xr;
for(var x=xs[0] ,xi=0,xl=xs.length,x1;
xi<xl;
 ++xi) {x=xs[xi] ;
if(x1= (x.block>b?x0: (x0=x,false) ) )return x1}return false} ) .call(this,next) ) || (next[next.length-1] ) ) ) } ) .call(this) } ,data_block=function(n) {;
return container_of(n) .data_block(n) } ;
return( {child_structure:child_structure,children:children,container_of:container_of,data_block:data_block} ) } ) .call(this) ) ;
var t=result;
return result} ,become_extent_index=function(e,o,sb) {;
var result=$.merge($.ext4.extent_index.decode(e,o) , (function( ) {var block_data=function() {;
return become_extent_tree(sb.read_block(e.leaf) ,sb) } ,data_block=function(n) {;
return(block_data() ) .flat_map(function(_) {return _.data_block(n) } ) } ;
return( {block_data:block_data,data_block:data_block} ) } ) .call(this) ) ;
var e=result;
return result} ,become_extent_leaf=function(e,o,sb) {;
var result=$.merge($.ext4.extent_leaf.decode(e,o) , (function( ) {var data_block=function(n) {;
return sb.read_block(e.start_low+n-e.block) } ;
return( {data_block:data_block} ) } ) .call(this) ) ;
var e=result;
return result} ;
return( (function(it) {return($.merge($.ext4.prototype,methods() ) ) ,it} ) .call(this, ( ($.ext4.init=function(block_source) {;
return this instanceof $.ext4? (function(it) {return(it.block_source=block_source) ,it} ) .call(this, (this) ) :new $.ext4(block_source) } ) ) ) ) } ) .call(this) } ) ;
